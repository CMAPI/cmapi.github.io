/*! cmapi 06-02-2017 */
var cmapi=cmapi||{};cmapi.channel=cmapi.channel||{},cmapi.overview=cmapi.overview||{},cmapi.channel["map.drag-drop"].notes=["Although marker, feature, and featureUrl are optional, one MUST be present.","If marker is included, the marker will be placed at the location of the drop.","Feature and featureUrl data will be placed at their natural location (equivalent to being loaded using map.feature.plot or map.feature.plot.url message)."],cmapi.channel["map.drag-drop"].notes=["Although both deSelectedId and deSelectedName are optional, one MUST be passed in if a sub-feature is to be identified. Generally, deSelectedId is preferred and deSelectedName is used when no deSelectedId is available.","The expected behavior resulting from this message is that this feature will be removed from the list of currently selected features (see map.status.selected below).  If the identified feature is not currently selected when the message is received, then the map widget SHOULD ignore this message (i.e., this message is idempotent)."],cmapi.channel["map.feature.draw"].notes=["If a widget sends a map.feature.draw message, the map SHALL go into draw mode.","When the map is placed in draw mode, the map SHALL issue a map.message.progress message using the messageId provided by the originating map.feature.draw request and the status equal 'start', to indicate to client widgets that the draw operation has started.","While in draw mode, the map SHALL send a map.message.progress message each time the user adds, deleted, or modifies points/vertices using the messageId provided by the originating map.feature.draw message and the status equal 'update'.","While in draw mode, as the user inputs, deletes, or updates points, the results SHALL be rendered on the map.","While the map is in draw mode, it SHOULD ignore messages that manipulate the map view, such as map.view.set, to allow the user to focus on the drawing operation without the map view shifting on them.","If the drawing is completed, the map SHALL initiate a map.message.complete message with the messageId of the original map.feature.draw request AND the map SHALL continue to display the feature that was drawn.","If the drawing is completed, the map SHALL issue a map.feature.plot message to notify all widgets listening that a new feature has been generated.  The intent is that widgets other than the one issuing the draw message will not be aware of the new feature until it has been successfully drawn","A drawing may be cancelled by issuing a map.message.cancel message, or via the map user interface.","If the draw mode is cancelled before the drawing is completed, the map SHALL issue a map.message.complete message with the messageId of the original map.feature.edit message and a status of 'cancelled' AND the feature being drawn SHALL be removed from the map"],cmapi.channel["map.feature.edit"].notes=["This is the format of the details object to be used in a map.message.complete message for feature editing.","In the event that the edit is being cancelled, these fields shall contain the state of the feature prior to the map.feature.edit."],cmapi.channel["map.feature.edit"].notes=["If a widget sends a map.feature.edit message, the map widget SHALL go into edit mode for the feature identified by the featureId.","When the feature is placed into edit mode the Map SHALL issue a map.message.progress message with the status equal 'start' using the messageId provided by the originating edit request, along with all the feature properties set to the current values in order to indicate to client widgets that the edit operation has started.","If the edit mode was initiated by the map itself (i.e., not via an external widget), then the messageId sent in the map.message.progress and map.message.complete messages will be generated by the map.","During edit mode, for each user modification of the feature (e.g., moving a point, adding some text, adding a new point, etc.) a map SHALL send a map.message.progress message with the status equal 'update'.  This SHALL occur each time the feature is manipulated during an edit. For instance, if a point of a line is moved to a new location, a map.message.progress message will be sent.","An edit procedure may be cancelled by issuing a map.message.cancel message","If the edit mode is cancelled for any reason before the edit is complete, the map SHALL issue a map.message.complete message with the messageId of the original map.feature.edit message and a status of 'cancelled'.  The details object of the map.message.complete message SHALL contain the original feature (i.e., before the edit began)","If the edit is completed, the map SHALL issue a map.message.complete with the messageId of the original map.feature.edit message and the details SHALL describe the edited feature","If the edit is completed, the map SHALL additionally send a map.feature.plot message so that other widgets receive the final state of the edited feature.  The map SHALL NOT issue a map.feature.plot message if the edit was cancelled."],cmapi.channel["map.feature.plot.aoi"].notes=["If sending an AOI, the GeoJSON object MUST be a single GeoJSON Feature object with either a Line, Point, or Polygon geometry type.  MulitLineStrings, MultiPolygons, and GeometryCollections are NOT supported for AOIs.","For example of AOI, see <a href='index.html#map.feature.plot'>map.feature.plot Example 4 (Plot Area of Interest)</a>."],cmapi.channel["map.feature.plot.geojson"].notes=["For example of GeoJSON, see map.feature.plot Example 3 (Plot GeoJSON)."],cmapi.channel["map.feature.plot"].notes=['If using the channel shouter to send a feature, embedded quotes in KML MUST be escaped with a backward slash (that is, use \\" instead of ").',"If sending GeoJSON follow the guidance in Appendix B for style information.","When plotting an Area of Interest, the format MUST be geojson AND the aoi object defined in Appendix B MUST be included as part of the GeoJSON parameters object."],cmapi.channel["map.feature.plot.url"].notes=["For version 1.1.0 of the API, featureName was changed to name for consistency with feature.plot.  In order to maintain backwards compatibility with version 1.0.* of the API, it is suggested that developers on the receiving side of these messages should look for the old featureName if name is not found in the message."],cmapi.channel["map.overlay.hide"].notes=["If the action to hide the overlay originates within the map application's user interface (i.e., the map is not responding to an external message), the map SHALL send out a corresponding map.overlay.hide message."],cmapi.channel["map.overlay.show"].notes=["If the action to show the overlay originates within the map application's user interface (i.e., the map is not responding to an external message), the map SHALL send out a corresponding map.overlay.show message."],cmapi.channel["map.feature.plot"].notes=['If using the channel shouter to send a feature, embedded quotes in KML MUST be escaped with a backward slash (that is, use \\" instead of ").',"If sending GeoJSON follow the guidance in Appendix B for style information.","When plotting an Area of Interest, the format MUST be geojson AND the aoi object defined in Appendix B MUST be included as part of the GeoJSON parameters object."],cmapi.channel["map.status.initialization"].notes=["A map notifies widgets when it is launching by sending out an 'initializing' message on the map.status.initialization channel.","A map then notifies widgets when it finishes initializing and is ready to receive messages by sending out a 'ready' message over the map.status.initialization channel.","Widgets should refrain sending out messages until it receives a 'ready' status over the map.status.initialization channel.","A map should send a 'mapswapinprogress' message at the start of the map swap process over the map.status.initialization channel to let widgets know the map is being swapped.","A widget may choose to stop sending messages after receiving a 'mapswapinprogress' until the next 'ready' is received.","A widget may choose to issue a status format request after a 'mapswapinprogress'/'ready' sequence to ensure that the formats and operations required are supported in the newly swapped map engine implementation.","The map core should send a 'teardown' message prior to the map widget being closed over the map.status.initialization channel to let widgets know to stop sending messages.","Widgets should not send messages after receiving a 'teardown' message until it receives another 'ready' message on the map.status.initialization channel.","A widget at any point in time may request a initialization status by sending the map a map.status.initialization"],cmapi.channel["map.status.selected"].notes=["Within a given selectedFeature, although both selectedId and selectedName are optional, one MUST be passed in if a sub-feature is to be identified. Generally, selectedId is preferred and selectedName is used when no selectedId is available. The implication of this is that if sub-features cannot be identified, they cannot be selected.","If the list of selected objects spans multiple overlays, then the payload will be an array of messages â€“ one message for each overlay that contains selected objects."];